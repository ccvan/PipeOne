/*
vim: syntax=groovy
-*- mode: groovy;-*-
 * -------------------------------------------------
 *  RNAseq Nextflow config file
 * -------------------------------------------------
 */

// Global default params, used in configs

params {
  outdir = './results'
  igenomes_base = 's3://ngi-igenomes/igenomes/'
  clusterOptions = false
  executor = 'local'
  queue = ''
  //scratch = '/largetmp/'
  scratch =  false
  version = '1.4' //Pipeline version
  nf_required_version = '0.32.2' //Minimum version of Nextflow required
  maxForks = 10
}

profiles {

  standard {
    includeConfig 'conf/base.config'
    includeConfig 'conf/igenomes.config'
  }
  
  conda {
    includeConfig 'conf/base.config'
    includeConfig 'conf/conda.config'
    includeConfig 'conf/igenomes.config'
  }
  
  
  docker {
    includeConfig 'conf/base.config'
    includeConfig 'conf/docker.config'
    includeConfig 'conf/igenomes.config'
  }
  singularity {
    includeConfig 'conf/base.config'
    includeConfig 'conf/singularity.config'
    includeConfig 'conf/igenomes.config'
  }
 
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.outdir}/pipeline_info/circRNA_timeline.html"
}
report {
  enabled = true
  file = "${params.outdir}/pipeline_info/circRNA_report.html"
}
trace {
  enabled = true
  file = "${params.outdir}/pipeline_info/circRNA_trace.txt"
}

manifest {
  homePage = 'RNAseq'
  description = 'Nextflow RNA-Seq'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

